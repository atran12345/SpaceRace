package com.example.spacerace;

import android.content.Intent;
import android.media.MediaPlayer;
import android.support.v7.app.AppCompatActivity;
import android.os.Bundle;
import android.view.View;
import android.widget.Button;
import android.widget.TextView;

public class Scoreboard extends AppCompatActivity {
    MediaPlayer mp;

    TextView time_tv_;
    TextView scores_tv_;
    Button done_btn_;

    String txt_file_to_use;

    String new_name;
    int score_tracker = 0;
    String string_to_write =  "";

    SDio scores_list = new SDio();

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_scoreboard);

        scores_tv_=(TextView) findViewById(R.id.scores_tv);
        time_tv_=(TextView) findViewById(R.id.time_tv);
        done_btn_=(Button)findViewById(R.id.done_btn);

        done_btn_.setOnClickListener(new View.OnClickListener() {@Override public void onClick(View v) {done();}});

        Intent intent = getIntent();

        String difficulty = intent.getStringExtra("difficulty");

        long finish_time = intent.getLongExtra("finish_time",000);
        time_tv_.setText("Your time is: \n" + finish_time + " seconds!");

        new_name = intent.getStringExtra("new_name");

        write_to_scores(difficulty, finish_time, new_name);

        play_sound(R.raw.twilight);
    }

    public void done()
    {
        Intent i = new Intent(Scoreboard.this, MainMenu.class);
        startActivity(i);
        stopPlaying();
    }

    public void write_to_scores(String difficulty, Long score, String name){


        if (difficulty.equals("1")){txt_file_to_use = "easy_hs.txt";}
        if (difficulty.equals("2")){txt_file_to_use = "medium_hs.txt";}
        if (difficulty.equals("3")){txt_file_to_use = "hard_hs.txt";}

        //read old list of scores
        String old_list = scores_list.readFromSDFile(txt_file_to_use);

        update_scoreboard(name, score, old_list);
    }

    public void update_scoreboard(String name, Long score, String list)
    {
        list = list.replaceAll("\\s+","");
        String[] highscores = list.split("____");

        boolean list_complete = false;

        while(list_complete == false) {

            int current_score = Integer.parseInt(highscores[score_tracker]);

            //check to see if new score is better than current score in list
            if(score < current_score ) {
                int index_to_stop = score_tracker;

                for(score_tracker = highscores.length - 2; score_tracker >= index_to_stop; score_tracker-=2) {
                    int name_tracker = score_tracker + 1;

                    if(score_tracker == index_to_stop) {
                        String add_score = score.toString();
                        highscores[score_tracker] = add_score;
                        highscores[name_tracker] = name;
                        list_complete = true;
                    }

                    else {
                        //update score n to score n - 1 (in this case n-2 since we have array [score, name, score, name, etc]
                        highscores[score_tracker] = highscores[score_tracker - 2];

                        //update name n to name n-1
                        highscores[name_tracker] = highscores[name_tracker - 2];
                    }
                }
            }
            score_tracker +=2;
            if(score_tracker >= highscores.length - 2) { list_complete = true; }
        }

        for(int k = 0; k < highscores.length - 1; k +=2)
        {
            //show highscores to txt
            scores_tv_.append("Name: " + highscores[k+1] + " Score: " + highscores[k] + " seconds\n");

            //update string for txt file
            string_to_write += highscores[k] + "____" + highscores[k+1] + "____";
        }
        //write to txt file
        scores_list.writeToSDFile(string_to_write, txt_file_to_use, "");
    }


    public void play_sound(int R_file_resource_id){
        //utility function to play a sound
        //usage:	play_sound(R.raw.sound_to_play);
        mp = null;
        mp = MediaPlayer.create(this, R_file_resource_id);
        mp.start();
        mp.setLooping(true);


        //need to release the player after complete or will stop playing sound when the 	stack runs out of memory
        mp.setOnCompletionListener(new MediaPlayer.OnCompletionListener() {
            public void onCompletion(MediaPlayer mp) {
                mp.release();};});

    }

    private void stopPlaying() {
        if (mp != null) {
            mp.stop();
            mp.release();
            mp = null;
        }
    }
}

